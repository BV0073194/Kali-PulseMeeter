#!/usr/bin/env python3
import shutil
import os
import json
import re
import sys
import subprocess
from pathlib import Path
from gi import require_version as gi_require_version
gi_require_version('Gtk', '3.0')

from gi.repository import Gtk,Gdk

PIDFILE = '/tmp/pulsemeeter.pid'

class Pulse:

    def __init__(self, config):
        sink_list = cmd("pactl list sinks short")
        for i in range(1, len(config['vi']) + 1):
            if(config['vi'][str(i)]['name'] != ''):
                if not re.search(config['vi'][str(i)]['name'], sink_list):
                    sink = config['vi'][str(i)]['name']
                    os.popen(f"pmctl init sink {sink}")

        source_list = cmd("pactl list sources short")
        for i in range(1, len(config['b']) + 1):
            if(config['b'][str(i)]['name'] != ''):
                if not re.search(config['b'][str(i)]['name'], source_list):
                    source = config['b'][str(i)]['name']
                    os.popen(f"pmctl init source {source}")


    def reconnect(self, config, device, number):
        sink_sufix = '' if device == 'hi' else '.monitor'
        for output in ['a1','a2','a3','b1','b3','b3']:
            dev = list(output)
            sink_index = [device, str(number), 'name']
            source_index = [dev[0], dev[1], 'name']
            source_sufix = '_sink' if list(output)[0] == 'b' else ''
            if config[device][str(number)][output] == True:
                self.connect(config, "connect", source_index, sink_index, sink_sufix, source_sufix)

        

    def connect(self, config, state, sink, source, latency):
        command = f"pmctl {state} {source} {sink} {latency}"
        # print(command)
        os.popen(command)

    def volume(self, name, sink, val):
        if (name == '' or sink == ''):
            return
        command = f"pmctl volume {name} {sink} {val}"
        # print(command)
        os.popen(command)

    def get_hardware_devices(self, kind):
        command = f"pmctl list {kind}"
        devices = cmd(command).split('\n')
        devices_concat = []
        for i in range(0, len(devices)-1, 2):
            devices_concat.append([devices[i], devices[i + 1]])
        return devices_concat

    def mute(self, name, device, state):
        command = f"pmctl mute {device} {name} {state}"
        os.popen(command)

    def apply_eq(self, config, index, name, control, status=''):
        master = config[index[0]][index[1]]['name']

        config[index[0]][index[1]]['eq_control'] = control
        config[index[0]][index[1]]['use_eq'] = True

        if not 'eq_name' in config[index[0]][index[1]]:
            config[index[0]][index[1]]['eq_name'] = name
        if index[0] == 'b':
            master = master + "_sink"
        command = f'pmctl eq {name} {master} {control}\n'
        if status != 'init':
            output = index[0] + index[1]
            for i in ['hi', 'vi']:
                for j in range (1, 4):
                    if config[i][str(j)][output] == True:
                        vi = config[i][str(j)]['name']
                        command = command + f'pmctl disconnect {vi} {master}\n'
                        if i == 'vi':
                            vi = vi + '.monitor'
                        command = command + f'pmctl connect {vi} {name}\n'
        # print(command)
        os.popen(command)

    def remove_eq(self, config, master, name, output):
        command = f'pmctl eq {name} remove\n'

        for i in ['hi', 'vi']:
            for j in range (1, 4):
                if config[i][str(j)][output] == True:
                    vi = config[i][str(j)]['name']
                    if i == 'vi':
                        vi = vi + '.monitor'
                    elif list(output)[0] == 'b':
                        master = master + '_sink'
                    command = command + f'pmctl connect {vi} {master}\n'

        # print(command)
        os.popen(command)
    
class Latency_Popup():
    def __init__(self, button, config, gladefile, index):

        self.config = config
        self.builder = Gtk.Builder()

        try:
            self.builder.add_objects_from_file(
                gladefile,
                [
                    'Latency_Popover',
                    'Latency_Adjust',
                ]
            )
        except Exception as ex:
            print('Error building main window!\n{}'.format(ex))
            sys.exit(1)

        self.Latency_Popover = self.builder.get_object('Latency_Popover')
        self.Latency_Popover.set_relative_to(button)

        self.Latency_Adjust = self.builder.get_object('Latency_Adjust')
        self.Latency_Adjust.set_value(self.config[index[0]][index[1]][index[2] + '_latency'])
        self.Latency_Adjust.connect('value_changed', self.latency_adjust, [index[0], index[1], index[2] + '_latency'])
        self.Latency_Popover.popup()

    def latency_adjust(self, widget, index):
        val = int(widget.get_value())
        # print(f'bb {index[0]} {index[1]} {index[2]} {val} \n')
        self.config[index[0]][index[1]][index[2]] = val

class Noisetorch_Popup():
    def __init__(self, button, config, gladefile, index):

        self.config = config
        self.builder = Gtk.Builder()

        try:
            self.builder.add_objects_from_file(
                gladefile,
                [
                    'Noisetorch_Popover',
                    'Noisetorch_Latency_Adjust',
                    'Noisetorch_Threshold_Adjust',
                ]
            )
        except Exception as ex:
            print('Error building main window!\n{}'.format(ex))
            sys.exit(1)

        self.Noisetorch_Popover = self.builder.get_object('Noisetorch_Popover')
        self.Noisetorch_Popover.set_relative_to(button)

        self.Noisetorch_Latency_Adjust = self.builder.get_object('Noisetorch_Latency_Adjust')
        self.Noisetorch_Latency_Adjust.set_value(self.config[index[0]][index[1]]['noisetorch_latency'])
        self.Noisetorch_Latency_Adjust.connect('value_changed', self.latency_adjust, [index[0], index[1]])

        self.Noisetorch_Threshold_Adjust = self.builder.get_object('Noisetorch_Threshold_Adjust')
        self.Noisetorch_Threshold_Adjust.set_value(self.config[index[0]][index[1]]['noisetorch_control'])
        self.Noisetorch_Threshold_Adjust.connect('value_changed', self.threshold_adjust, [index[0], index[1]])

        self.Noisetorch_Popover.popup()

    def latency_adjust(self, widget, index):
        val = int(widget.get_value())
        # print(f'{index[0]} {index[1]} {val} \n')
        self.config[index[0]][index[1]]['noisetorch_latency'] = val

    def threshold_adjust(self, widget, index):
        val = int(widget.get_value())
        # print(f'{index[0]} {index[1]} {val} \n')
        self.config[index[0]][index[1]]['noisetorch_control'] = val


class EqPopover():

    def __init__(self, button, config, pulse, gladefile, index, name):

        self.config = config
        self.builder = Gtk.Builder()
        self.pulse = pulse

        try:
            self.builder.add_objects_from_file(
                gladefile,
                [
                    'EQ_Popup',
                    'EQ_50_hz_Adjust',
                    'EQ_100_hz_Adjust',
                    'EQ_156_hz_Adjust',
                    'EQ_220_hz_Adjust',
                    'EQ_311_hz_Adjust',
                    'EQ_440_hz_Adjust',
                    'EQ_622_hz_Adjust',
                    'EQ_880_hz_Adjust',
                    'EQ_1_25_khz_Adjust',
                    'EQ_1_75_khz_Adjust',
                    'EQ_2_5_khz_Adjust',
                    'EQ_3_5_khz_Adjust',
                    'EQ_5_khz_Adjust',
                    'EQ_10_khz_Adjust',
                    'EQ_20_khz_Adjust',
                    'Apply_EQ_Button',
                    'Reset_EQ_Button',
                    'Disable_EQ_Button'
                ]
            )
        except Exception as ex:
            print('Error building main window!\n{}'.format(ex))
            sys.exit(1)


        self.eq = []
        self.eq.append(self.builder.get_object('EQ_50_hz_Adjust'))
        self.eq.append(self.builder.get_object('EQ_100_hz_Adjust'))
        self.eq.append(self.builder.get_object('EQ_156_hz_Adjust'))
        self.eq.append(self.builder.get_object('EQ_220_hz_Adjust'))
        self.eq.append(self.builder.get_object('EQ_311_hz_Adjust'))
        self.eq.append(self.builder.get_object('EQ_440_hz_Adjust'))
        self.eq.append(self.builder.get_object('EQ_622_hz_Adjust'))
        self.eq.append(self.builder.get_object('EQ_880_hz_Adjust'))
        self.eq.append(self.builder.get_object('EQ_1_25_khz_Adjust'))
        self.eq.append(self.builder.get_object('EQ_1_75_khz_Adjust'))
        self.eq.append(self.builder.get_object('EQ_2_5_khz_Adjust'))
        self.eq.append(self.builder.get_object('EQ_3_5_khz_Adjust'))
        self.eq.append(self.builder.get_object('EQ_5_khz_Adjust'))
        self.eq.append(self.builder.get_object('EQ_10_khz_Adjust'))
        self.eq.append(self.builder.get_object('EQ_20_khz_Adjust'))
        self.Apply_EQ_Button = self.builder.get_object('Apply_EQ_Button')
        self.Reset_EQ_Button = self.builder.get_object('Reset_EQ_Button')
        self.Disable_EQ_Button = self.builder.get_object('Disable_EQ_Button')

        control = self.config[index[0]][index[1]]['eq_control'] 
        j = 0
        if control != '':
            for i in control.split(','):
                self.eq[j].set_value(float(i))
                j = j + 1

        self.Apply_EQ_Button.connect('pressed', self.apply_eq, index, name)
        self.Reset_EQ_Button.connect('pressed', self.reset_eq)
        self.Disable_EQ_Button.connect('pressed', self.disable_eq, index, name)

        self.EQ_Popup = self.builder.get_object('EQ_Popup')

        self.EQ_Popup.set_relative_to(button)
        self.EQ_Popup.popup()

        self.builder.connect_signals(self)

    def apply_eq(self, widget, index, name):
        control=''
        for i in self.eq:
            control = control + ',' + str(i.get_value())
        control = control[1:]
        self.pulse.apply_eq(self.config, index, name, control)

    def disable_eq(self, widget, index, name):
        # self.config[index[0]][index[1]]['eq_control'] = ''
        self.config[index[0]][index[1]]['use_eq'] = False
        master = self.config[index[0]][index[1]]['name']
        output = index[0] + index[1]

        self.pulse.remove_eq(self.config, master, name, output)

    def reset_eq(self, widget):
        for i in self.eq:
            i.set_value(0)

    def reset_value(self, widget, event):
        if event.type == gtk.gdk.BUTTON_PRESS and event.button == 3:
            widget.set_value(0)

    def delete_event(self, widget, event, donnees=None):
        pass



class MainWindow(Gtk.Window):

    def __init__(self, config, pulse):
        self.config = config
        Gtk.Window.__init__(self)
        self.builder = Gtk.Builder()
        
        gladefile = ''
        # gladefile = get_config_path(True)
        if not os.path.exists(gladefile):
            gladefile = '/usr/local/share/doc/pulsemeeter/Interface.glade'
            if not os.path.exists(gladefile):
                gladefile = '/usr/share/doc/pulsemeeter/Interface.glade'
                if not os.path.exists(gladefile):
                    gladefile = get_config_path(True)
                else:
                    shutil.copy(gladefile, get_config_path(True))
            else:
                shutil.copy(gladefile, get_config_path(True))
        self.gladefile = gladefile

        try:
            self.builder.add_objects_from_file(
                gladefile,
                [
                    'Popover',
                    'Popover_Entry',
                    'Latency_Popover',
                    'Latency_Adjust',
                    'Noisetorch_Popover',
                    'Noisetorch_Latency_Adjust',
                    'Noisetorch_Threshold_Adjust',
                    'A1_Combobox',
                    'A2_Combobox',
                    'A3_Combobox',
                    'Hardware_Input_Popover',

                    'Hardware_Input_1_Combobox',
                    'Hardware_Input_2_Combobox',
                    'Hardware_Input_3_Combobox',

                    'Hardware_Input_1_Noisetorch',
                    'Hardware_Input_2_Noisetorch',
                    'Hardware_Input_3_Noisetorch',

                    'Hardware_Input_1_Label',
                    'Hardware_Input_1_Adjust',
                    'Hardware_Input_1_A1',
                    'Hardware_Input_1_A2',
                    'Hardware_Input_1_A3',
                    'Hardware_Input_1_B1',
                    'Hardware_Input_1_B2',
                    'Hardware_Input_1_B3',

                    'Hardware_Input_2_Adjust',
                    'Hardware_Input_2_A1',
                    'Hardware_Input_2_A2',
                    'Hardware_Input_2_A3',
                    'Hardware_Input_2_B1',
                    'Hardware_Input_2_B2',
                    'Hardware_Input_2_B3',

                    'Hardware_Input_3_Adjust',
                    'Hardware_Input_3_A1',
                    'Hardware_Input_3_A2',
                    'Hardware_Input_3_A3',
                    'Hardware_Input_3_B1',
                    'Hardware_Input_3_B2',
                    'Hardware_Input_3_B3',

                    'Virtual_Input_1_Adjust',
                    'Virtual_Input_1_A1',
                    'Virtual_Input_1_A2',
                    'Virtual_Input_1_A3',
                    'Virtual_Input_1_B1',
                    'Virtual_Input_1_B2',
                    'Virtual_Input_1_B3',

                    'Virtual_Input_2_Adjust',
                    'Virtual_Input_2_A1',
                    'Virtual_Input_2_A2',
                    'Virtual_Input_2_A3',
                    'Virtual_Input_2_B1',
                    'Virtual_Input_2_B2',
                    'Virtual_Input_2_B3',

                    'Virtual_Input_3_Adjust',
                    'Virtual_Input_3_A1',
                    'Virtual_Input_3_A2',
                    'Virtual_Input_3_A3',
                    'Virtual_Input_3_B1',
                    'Virtual_Input_3_B2',
                    'Virtual_Input_3_B3',

                    'Mute_A1',
                    'Mute_A2',
                    'Mute_A3',
                    'Mute_B1',
                    'Mute_B2',
                    'Mute_B3',

                    'Mono_A1',
                    'Mono_A2',
                    'Mono_A3',
                    'Mono_B1',
                    'Mono_B2',
                    'Mono_B3',

                    'EQ_A1',
                    'EQ_A2',
                    'EQ_A3',
                    'EQ_B1',
                    'EQ_B2',
                    'EQ_B3',

                    'Master_A1_Adjust',
                    'Master_A2_Adjust',
                    'Master_A3_Adjust',
                    'Master_B1_Adjust',
                    'Master_B2_Adjust',
                    'Master_B3_Adjust',

                    'EQ_50_hz_Adjust',
                    'EQ_100_hz_Adjust',
                    'EQ_156_hz_Adjust',
                    'EQ_220_hz_Adjust',
                    'EQ_311_hz_Adjust',
                    'EQ_440_hz_Adjust',
                    'EQ_622_hz_Adjust',
                    'EQ_880_hz_Adjust',
                    'EQ_1_25_khz_Adjust',
                    'EQ_1_75_khz_Adjust',
                    'EQ_2_5_khz_Adjust',
                    'EQ_3_5_khz_Adjust',
                    'EQ_5_khz_Adjust',
                    'EQ_10_khz_Adjust',
                    'EQ_20_khz_Adjust',
                    'Apply_EQ_Button',
                    'EQ_Popup',

                    'Window'
                ]
            )
        except Exception as ex:
            print('Error building main window!\n{}'.format(ex))
            sys.exit(1)

        self.pulse = pulse
        self.init = True

        for i in ['a','b']:
            for j in range(1, 4):
                if self.config[i][str(j)]['use_eq'] == True:
                    self.pulse.apply_eq(self.config, [i, str(j)], self.config[i][str(j)]['eq_name'], self.config[i][str(j)]['eq_control'], 'init')

        self.src_list = Gtk.ListStore(str)
        self.src_concat = self.pulse.get_hardware_devices("sources")

        self.Hardware_Input_1_Combobox = self.builder.get_object('Hardware_Input_1_Combobox')
        self.Hardware_Input_2_Combobox = self.builder.get_object('Hardware_Input_2_Combobox')
        self.Hardware_Input_3_Combobox = self.builder.get_object('Hardware_Input_3_Combobox')

        self.Latency_Popover = self.builder.get_object('Latency_Popover')
        # self.Latency_Popover.connect('closed')
        self.Latency_Adjust = self.builder.get_object('Latency_Adjust')

        self.Noisetorch_Popover = self.builder.get_object('Noisetorch_Popover')

        self.Noisetorch_Latency_Adjust = self.builder.get_object('Noisetorch_Latency_Adjust')
        self.Noisetorch_Threshold_Adjust = self.builder.get_object('Noisetorch_Threshold_Adjust')
        
        self.Hardware_Input_1_Combobox.append_text("")
        self.Hardware_Input_2_Combobox.append_text("")
        self.Hardware_Input_3_Combobox.append_text("")
        for device in self.src_concat:
            self.Hardware_Input_1_Combobox.append_text(device[1][:20] + '...')
            self.Hardware_Input_2_Combobox.append_text(device[1][:20] + '...')
            self.Hardware_Input_3_Combobox.append_text(device[1][:20] + '...')

        index = [-1, -1, -1]
        for j in range(1, 4):
            for i in range(0, len(self.src_concat)):
                if self.src_concat[i][0] == self.config['hi'][str(j)]['name']:
                    index[j - 1] = i + 1
                    break;

        self.Hardware_Input_1_Combobox.set_active(index[0])
        self.Hardware_Input_2_Combobox.set_active(index[1])
        self.Hardware_Input_3_Combobox.set_active(index[2])
        self.Hardware_Input_1_Combobox.connect("changed", self.on_combo_changed, ['hi','1'], self.src_concat)
        self.Hardware_Input_2_Combobox.connect("changed", self.on_combo_changed, ['hi','2'], self.src_concat)
        self.Hardware_Input_3_Combobox.connect("changed", self.on_combo_changed, ['hi','3'], self.src_concat)

        self.device_list = Gtk.ListStore(str)
        self.devices_concat = self.pulse.get_hardware_devices("sinks")

        self.A1_Combobox = self.builder.get_object('A1_Combobox')
        self.A2_Combobox = self.builder.get_object('A2_Combobox')
        self.A3_Combobox = self.builder.get_object('A3_Combobox')

        self.A1_Combobox.append_text("")
        self.A2_Combobox.append_text("")
        self.A3_Combobox.append_text("")
        for device in self.devices_concat:
            self.A1_Combobox.append_text(device[1])
            self.A2_Combobox.append_text(device[1])
            self.A3_Combobox.append_text(device[1])

        index = [-1, -1, -1]
        for j in range(1, 4):
            for i in range(0, len(self.devices_concat)):
                if self.devices_concat[i][0] == self.config['a'][str(j)]['name']:
                    index[j - 1] = i + 1
                    break;

        self.A1_Combobox.set_active(index[0])
        self.A2_Combobox.set_active(index[1])
        self.A3_Combobox.set_active(index[2])
        self.A1_Combobox.connect("changed", self.on_combo_changed, ['a','1'], self.devices_concat)
        self.A2_Combobox.connect("changed", self.on_combo_changed, ['a','2'], self.devices_concat)
        self.A3_Combobox.connect("changed", self.on_combo_changed, ['a','3'], self.devices_concat)

        self.Hardware_Input_1_Adjust = self.builder.get_object('Hardware_Input_1_Adjust')
        self.Hardware_Input_1_Adjust.set_value(self.config['hi']['1']['vol'])
        self.Hardware_Input_1_Adjust.connect('value-changed', self.slider_change, "source", ['hi', '1']) # self.config['hi']['1']['name'], ['vol','hi','1'])
        self.Hardware_Input_1_Noisetorch = self.builder.get_object('Hardware_Input_1_Noisetorch')
        self.Hardware_Input_2_Noisetorch = self.builder.get_object('Hardware_Input_2_Noisetorch')
        self.Hardware_Input_3_Noisetorch = self.builder.get_object('Hardware_Input_3_Noisetorch')

        self.Hardware_Input_1_Noisetorch.connect('toggled', self.noisetorch_toggle, ['hi', '1'], 'hi1_noisetorch')
        self.Hardware_Input_2_Noisetorch.connect('toggled', self.noisetorch_toggle, ['hi', '2'], 'hi2_noisetorch')
        self.Hardware_Input_3_Noisetorch.connect('toggled', self.noisetorch_toggle, ['hi', '3'], 'hi3_noisetorch')

        self.Hardware_Input_1_Noisetorch.set_active(self.config['hi']['1']['use_noisetorch'])
        self.Hardware_Input_2_Noisetorch.set_active(self.config['hi']['2']['use_noisetorch'])
        self.Hardware_Input_3_Noisetorch.set_active(self.config['hi']['3']['use_noisetorch'])

        self.Hardware_Input_1_Noisetorch.connect("button_press_event", self.noisetorch_popop, ['hi', '1'])
        self.Hardware_Input_2_Noisetorch.connect("button_press_event", self.noisetorch_popop, ['hi', '2'])
        self.Hardware_Input_3_Noisetorch.connect("button_press_event", self.noisetorch_popop, ['hi', '3'])

        self.Hardware_Input_1_A1 = self.builder.get_object('Hardware_Input_1_A1')
        self.Hardware_Input_1_A2 = self.builder.get_object('Hardware_Input_1_A2')
        self.Hardware_Input_1_A3 = self.builder.get_object('Hardware_Input_1_A3')
        self.Hardware_Input_1_B1 = self.builder.get_object('Hardware_Input_1_B1')
        self.Hardware_Input_1_B2 = self.builder.get_object('Hardware_Input_1_B2')
        self.Hardware_Input_1_B3 = self.builder.get_object('Hardware_Input_1_B3')
        self.Hardware_Input_1_A1.connect("toggled", self.on_button_toggled, ['a', '1'], ['hi', '1'])
        self.Hardware_Input_1_A2.connect("toggled", self.on_button_toggled, ['a', '2'], ['hi', '1'])
        self.Hardware_Input_1_A3.connect("toggled", self.on_button_toggled, ['a', '3'], ['hi', '1'])
        self.Hardware_Input_1_B1.connect("toggled", self.on_button_toggled, ['b', '1'], ['hi', '1'])
        self.Hardware_Input_1_B2.connect("toggled", self.on_button_toggled, ['b', '2'], ['hi', '1'])
        self.Hardware_Input_1_B3.connect("toggled", self.on_button_toggled, ['b', '3'], ['hi', '1'])
        self.Hardware_Input_1_A1.set_active(self.config['hi']['1']['a1'])
        self.Hardware_Input_1_A2.set_active(self.config['hi']['1']['a2'])
        self.Hardware_Input_1_A3.set_active(self.config['hi']['1']['a3'])
        self.Hardware_Input_1_B1.set_active(self.config['hi']['1']['b1'])
        self.Hardware_Input_1_B2.set_active(self.config['hi']['1']['b2'])
        self.Hardware_Input_1_B3.set_active(self.config['hi']['1']['b3'])

        self.Hardware_Input_1_A1.connect("button_press_event", self.loopback_latency_popop, ['hi', '1', 'a1'])
        self.Hardware_Input_1_A2.connect("button_press_event", self.loopback_latency_popop, ['hi', '1', 'a2'])
        self.Hardware_Input_1_A3.connect("button_press_event", self.loopback_latency_popop, ['hi', '1', 'a3'])
        self.Hardware_Input_1_B1.connect("button_press_event", self.loopback_latency_popop, ['hi', '1', 'b1'])
        self.Hardware_Input_1_B2.connect("button_press_event", self.loopback_latency_popop, ['hi', '1', 'b2'])
        self.Hardware_Input_1_B3.connect("button_press_event", self.loopback_latency_popop, ['hi', '1', 'b3'])

        self.Hardware_Input_2_Label = self.builder.get_object('Hardware_Input_2')
        self.Hardware_Input_2_Adjust = self.builder.get_object('Hardware_Input_2_Adjust')
        self.Hardware_Input_2_Adjust.set_value(self.config['hi']['2']['vol'])
        self.Hardware_Input_2_Adjust.connect('value-changed', self.slider_change, "source", ['hi', '2'])
        self.Hardware_Input_2_A1 = self.builder.get_object('Hardware_Input_2_A1')
        self.Hardware_Input_2_A2 = self.builder.get_object('Hardware_Input_2_A2')
        self.Hardware_Input_2_A3 = self.builder.get_object('Hardware_Input_2_A3')
        self.Hardware_Input_2_B1 = self.builder.get_object('Hardware_Input_2_B1')
        self.Hardware_Input_2_B2 = self.builder.get_object('Hardware_Input_2_B2')
        self.Hardware_Input_2_B3 = self.builder.get_object('Hardware_Input_2_B3')
        self.Hardware_Input_2_A1.connect("toggled", self.on_button_toggled, ['a', '1'], ['hi', '2'])
        self.Hardware_Input_2_A2.connect("toggled", self.on_button_toggled, ['a', '2'], ['hi', '2'])
        self.Hardware_Input_2_A3.connect("toggled", self.on_button_toggled, ['a', '3'], ['hi', '2'])
        self.Hardware_Input_2_B1.connect("toggled", self.on_button_toggled, ['b', '1'], ['hi', '2'])
        self.Hardware_Input_2_B2.connect("toggled", self.on_button_toggled, ['b', '2'], ['hi', '2'])
        self.Hardware_Input_2_B3.connect("toggled", self.on_button_toggled, ['b', '3'], ['hi', '2'])
        self.Hardware_Input_2_A1.set_active(self.config['hi']['2']['a1'])
        self.Hardware_Input_2_A2.set_active(self.config['hi']['2']['a2'])
        self.Hardware_Input_2_A3.set_active(self.config['hi']['2']['a3'])
        self.Hardware_Input_2_B1.set_active(self.config['hi']['2']['b1'])
        self.Hardware_Input_2_B2.set_active(self.config['hi']['2']['b2'])
        self.Hardware_Input_2_B3.set_active(self.config['hi']['2']['b3'])

        self.Hardware_Input_2_A1.connect("button_press_event", self.loopback_latency_popop, ['hi', '2', 'a1'])
        self.Hardware_Input_2_A2.connect("button_press_event", self.loopback_latency_popop, ['hi', '2', 'a2'])
        self.Hardware_Input_2_A3.connect("button_press_event", self.loopback_latency_popop, ['hi', '2', 'a3'])
        self.Hardware_Input_2_B1.connect("button_press_event", self.loopback_latency_popop, ['hi', '2', 'b1'])
        self.Hardware_Input_2_B2.connect("button_press_event", self.loopback_latency_popop, ['hi', '2', 'b2'])
        self.Hardware_Input_2_B3.connect("button_press_event", self.loopback_latency_popop, ['hi', '2', 'b3'])

        self.Hardware_Input_3_Label = self.builder.get_object('Hardware_Input_3')
        self.Hardware_Input_3_Adjust = self.builder.get_object('Hardware_Input_3_Adjust')
        self.Hardware_Input_3_Adjust.set_value(self.config['hi']['3']['vol'])
        self.Hardware_Input_3_Adjust.connect('value-changed', self.slider_change, "source", ['hi', '3'])
        self.Hardware_Input_3_A1 = self.builder.get_object('Hardware_Input_3_A1')
        self.Hardware_Input_3_A2 = self.builder.get_object('Hardware_Input_3_A2')
        self.Hardware_Input_3_A3 = self.builder.get_object('Hardware_Input_3_A3')
        self.Hardware_Input_3_B1 = self.builder.get_object('Hardware_Input_3_B1')
        self.Hardware_Input_3_B2 = self.builder.get_object('Hardware_Input_3_B2')
        self.Hardware_Input_3_B3 = self.builder.get_object('Hardware_Input_3_B3')
        self.Hardware_Input_3_A1.connect("toggled", self.on_button_toggled, ['a', '1'], ['hi', '3'])
        self.Hardware_Input_3_A2.connect("toggled", self.on_button_toggled, ['a', '2'], ['hi', '3'])
        self.Hardware_Input_3_A3.connect("toggled", self.on_button_toggled, ['a', '3'], ['hi', '3'])
        self.Hardware_Input_3_B1.connect("toggled", self.on_button_toggled, ['b', '1'], ['hi', '3'])
        self.Hardware_Input_3_B2.connect("toggled", self.on_button_toggled, ['b', '2'], ['hi', '3'])
        self.Hardware_Input_3_B3.connect("toggled", self.on_button_toggled, ['b', '3'], ['hi', '3'])
        self.Hardware_Input_3_A1.set_active(self.config['hi']['3']['a1'])
        self.Hardware_Input_3_A2.set_active(self.config['hi']['3']['a2'])
        self.Hardware_Input_3_A3.set_active(self.config['hi']['3']['a3'])
        self.Hardware_Input_3_B1.set_active(self.config['hi']['3']['b1'])
        self.Hardware_Input_3_B2.set_active(self.config['hi']['3']['b2'])
        self.Hardware_Input_3_B3.set_active(self.config['hi']['3']['b3'])

        self.Hardware_Input_3_A1.connect("button_press_event", self.loopback_latency_popop, ['hi', '3', 'a1'])
        self.Hardware_Input_3_A2.connect("button_press_event", self.loopback_latency_popop, ['hi', '3', 'a2'])
        self.Hardware_Input_3_A3.connect("button_press_event", self.loopback_latency_popop, ['hi', '3', 'a3'])
        self.Hardware_Input_3_B1.connect("button_press_event", self.loopback_latency_popop, ['hi', '3', 'b1'])
        self.Hardware_Input_3_B2.connect("button_press_event", self.loopback_latency_popop, ['hi', '3', 'b2'])
        self.Hardware_Input_3_B3.connect("button_press_event", self.loopback_latency_popop, ['hi', '3', 'b3'])

        
        self.Popover = self.builder.get_object('Popover')
        self.Popover_Entry = self.builder.get_object('Popover_Entry')
        self.Popover_Entry.connect('activate', self.set_popup_entry)

        self.Virtual_Input_1_Label = self.builder.get_object('Virtual_Input_1_Label')
        self.Virtual_Input_1_Label_Event_Box = self.builder.get_object('Virtual_Input_1_Label_Event_Box')
        self.Virtual_Input_1_Label_Event_Box.connect('button_press_event', self.label_click, self.Virtual_Input_1_Label, ['vi', '1', 'name'])
        self.Virtual_Input_1_Label.set_text(self.config['vi']['1']['name'] if self.config['vi']['1']['name'] != '' else 'Hardware_Input_1')

        self.Virtual_Input_1_Adjust = self.builder.get_object('Virtual_Input_1_Adjust')
        self.Virtual_Input_1_Adjust.set_value(self.config['vi']['1']['vol'])
        self.Virtual_Input_1_Adjust.connect('value-changed', self.slider_change, "sink", ['vi', '1'])

        self.Virtual_Input_1_A1 = self.builder.get_object('Virtual_Input_1_A1')
        self.Virtual_Input_1_A2 = self.builder.get_object('Virtual_Input_1_A2')
        self.Virtual_Input_1_A3 = self.builder.get_object('Virtual_Input_1_A3')
        self.Virtual_Input_1_B1 = self.builder.get_object('Virtual_Input_1_B1')
        self.Virtual_Input_1_B2 = self.builder.get_object('Virtual_Input_1_B2')
        self.Virtual_Input_1_B3 = self.builder.get_object('Virtual_Input_1_B3')
        self.Virtual_Input_1_A1.connect("toggled", self.on_button_toggled, ['a', '1'], ['vi', '1'])
        self.Virtual_Input_1_A2.connect("toggled", self.on_button_toggled, ['a', '2'], ['vi', '1'])
        self.Virtual_Input_1_A3.connect("toggled", self.on_button_toggled, ['a', '3'], ['vi', '1'])
        self.Virtual_Input_1_B1.connect("toggled", self.on_button_toggled, ['b', '1'], ['vi', '1'])
        self.Virtual_Input_1_B2.connect("toggled", self.on_button_toggled, ['b', '2'], ['vi', '1'])
        self.Virtual_Input_1_B3.connect("toggled", self.on_button_toggled, ['b', '3'], ['vi', '1'])

        self.Virtual_Input_1_A1.connect("button_press_event", self.loopback_latency_popop, ['vi', '1', 'a1'])
        self.Virtual_Input_1_A2.connect("button_press_event", self.loopback_latency_popop, ['vi', '1', 'a2'])
        self.Virtual_Input_1_A3.connect("button_press_event", self.loopback_latency_popop, ['vi', '1', 'a3'])
        self.Virtual_Input_1_B1.connect("button_press_event", self.loopback_latency_popop, ['vi', '1', 'b1'])
        self.Virtual_Input_1_B2.connect("button_press_event", self.loopback_latency_popop, ['vi', '1', 'b2'])
        self.Virtual_Input_1_B3.connect("button_press_event", self.loopback_latency_popop, ['vi', '1', 'b3'])

        self.Virtual_Input_1_A1.set_active(self.config['vi']['1']['a1'])
        self.Virtual_Input_1_A2.set_active(self.config['vi']['1']['a2'])
        self.Virtual_Input_1_A3.set_active(self.config['vi']['1']['a3'])
        self.Virtual_Input_1_B1.set_active(self.config['vi']['1']['b1'])
        self.Virtual_Input_1_B2.set_active(self.config['vi']['1']['b2'])
        self.Virtual_Input_1_B3.set_active(self.config['vi']['1']['b3'])
        

        self.Virtual_Input_2_Label = self.builder.get_object('Virtual_Input_2_Label')
        self.Virtual_Input_2_Label_Event_Box = self.builder.get_object('Virtual_Input_2_Label_Event_Box')
        self.Virtual_Input_2_Label_Event_Box.connect('button_press_event', self.label_click, self.Virtual_Input_2_Label, ['vi', '2', 'name'])
        self.Virtual_Input_2_Label.set_text(self.config['vi']['2']['name'] if self.config['vi']['2']['name'] != '' else 'Hardware_Input_2')

        self.Virtual_Input_2_Adjust = self.builder.get_object('Virtual_Input_2_Adjust')
        self.Virtual_Input_2_Adjust.set_value(self.config['vi']['2']['vol'])
        self.Virtual_Input_2_Adjust.connect('value-changed', self.slider_change, "sink", ['vi', '2'])

        self.Virtual_Input_2_A1 = self.builder.get_object('Virtual_Input_2_A1')
        self.Virtual_Input_2_A2 = self.builder.get_object('Virtual_Input_2_A2')
        self.Virtual_Input_2_A3 = self.builder.get_object('Virtual_Input_2_A3')
        self.Virtual_Input_2_B1 = self.builder.get_object('Virtual_Input_2_B1')
        self.Virtual_Input_2_B2 = self.builder.get_object('Virtual_Input_2_B2')
        self.Virtual_Input_2_B3 = self.builder.get_object('Virtual_Input_2_B3')
        self.Virtual_Input_2_A1.connect("toggled", self.on_button_toggled, ['a', '1'], ['vi', '2'])
        self.Virtual_Input_2_A2.connect("toggled", self.on_button_toggled, ['a', '2'], ['vi', '2'])
        self.Virtual_Input_2_A3.connect("toggled", self.on_button_toggled, ['a', '3'], ['vi', '2'])
        self.Virtual_Input_2_B1.connect("toggled", self.on_button_toggled, ['b', '1'], ['vi', '2'])
        self.Virtual_Input_2_B2.connect("toggled", self.on_button_toggled, ['b', '2'], ['vi', '2'])
        self.Virtual_Input_2_B3.connect("toggled", self.on_button_toggled, ['b', '3'], ['vi', '2'])
        self.Virtual_Input_2_A1.set_active(self.config['vi']['2']['a1'])
        self.Virtual_Input_2_A2.set_active(self.config['vi']['2']['a2'])
        self.Virtual_Input_2_A3.set_active(self.config['vi']['2']['a3'])
        self.Virtual_Input_2_B1.set_active(self.config['vi']['2']['b1'])
        self.Virtual_Input_2_B2.set_active(self.config['vi']['2']['b2'])
        self.Virtual_Input_2_B3.set_active(self.config['vi']['2']['b3'])

        self.Virtual_Input_2_A1.connect("button_press_event", self.loopback_latency_popop, ['vi', '2', 'a1'])
        self.Virtual_Input_2_A2.connect("button_press_event", self.loopback_latency_popop, ['vi', '2', 'a2'])
        self.Virtual_Input_2_A3.connect("button_press_event", self.loopback_latency_popop, ['vi', '2', 'a3'])
        self.Virtual_Input_2_B1.connect("button_press_event", self.loopback_latency_popop, ['vi', '2', 'b1'])
        self.Virtual_Input_2_B2.connect("button_press_event", self.loopback_latency_popop, ['vi', '2', 'b2'])
        self.Virtual_Input_2_B3.connect("button_press_event", self.loopback_latency_popop, ['vi', '2', 'b3'])

        self.Virtual_Input_3_Label = self.builder.get_object('Virtual_Input_3_Label')
        self.Virtual_Input_3_Label_Event_Box = self.builder.get_object('Virtual_Input_3_Label_Event_Box')
        self.Virtual_Input_3_Label_Event_Box.connect('button_press_event', self.label_click, self.Virtual_Input_3_Label, ['vi', '3', 'name'])
        self.Virtual_Input_3_Label.set_text(self.config['vi']['3']['name'] if self.config['vi']['3']['name'] != '' else 'Hardware_Input_3')
        self.Virtual_Input_3_Adjust = self.builder.get_object('Virtual_Input_3_Adjust')
        self.Virtual_Input_3_Adjust.set_value(self.config['vi']['3']['vol'])
        self.Virtual_Input_3_Adjust.connect('value-changed', self.slider_change, "sink", ['vi', '3'])
        self.Virtual_Input_3_A1 = self.builder.get_object('Virtual_Input_3_A1')
        self.Virtual_Input_3_A2 = self.builder.get_object('Virtual_Input_3_A2')
        self.Virtual_Input_3_A3 = self.builder.get_object('Virtual_Input_3_A3')
        self.Virtual_Input_3_B1 = self.builder.get_object('Virtual_Input_3_B1')
        self.Virtual_Input_3_B2 = self.builder.get_object('Virtual_Input_3_B2')
        self.Virtual_Input_3_B3 = self.builder.get_object('Virtual_Input_3_B3')
        self.Virtual_Input_3_A1.connect("toggled", self.on_button_toggled, ['a', '1'], ['vi', '3'])
        self.Virtual_Input_3_A2.connect("toggled", self.on_button_toggled, ['a', '2'], ['vi', '3'])
        self.Virtual_Input_3_A3.connect("toggled", self.on_button_toggled, ['a', '3'], ['vi', '3'])
        self.Virtual_Input_3_B1.connect("toggled", self.on_button_toggled, ['b', '1'], ['vi', '3'])
        self.Virtual_Input_3_B2.connect("toggled", self.on_button_toggled, ['b', '2'], ['vi', '3'])
        self.Virtual_Input_3_B3.connect("toggled", self.on_button_toggled, ['b', '3'], ['vi', '3'])
        self.Virtual_Input_3_A1.set_active(self.config['vi']['3']['a1'])
        self.Virtual_Input_3_A2.set_active(self.config['vi']['3']['a2'])
        self.Virtual_Input_3_A3.set_active(self.config['vi']['3']['a3'])
        self.Virtual_Input_3_B1.set_active(self.config['vi']['3']['b1'])
        self.Virtual_Input_3_B2.set_active(self.config['vi']['3']['b2'])
        self.Virtual_Input_3_B3.set_active(self.config['vi']['3']['b3'])

        self.Virtual_Input_3_A1.connect("button_press_event", self.loopback_latency_popop, ['vi', '3', 'a1'])
        self.Virtual_Input_3_A2.connect("button_press_event", self.loopback_latency_popop, ['vi', '3', 'a2'])
        self.Virtual_Input_3_A3.connect("button_press_event", self.loopback_latency_popop, ['vi', '3', 'a3'])
        self.Virtual_Input_3_B1.connect("button_press_event", self.loopback_latency_popop, ['vi', '3', 'b1'])
        self.Virtual_Input_3_B2.connect("button_press_event", self.loopback_latency_popop, ['vi', '3', 'b2'])
        self.Virtual_Input_3_B3.connect("button_press_event", self.loopback_latency_popop, ['vi', '3', 'b3'])


        self.Master_A1_Adjust = self.builder.get_object('Master_A1_Adjust')
        self.Master_A3_Adjust = self.builder.get_object('Master_A3_Adjust')
        self.Master_A2_Adjust = self.builder.get_object('Master_A2_Adjust')

        self.Master_A1_Adjust.connect('value-changed', self.slider_change, "sink", ['a', '1'])
        self.Master_A2_Adjust.connect('value-changed', self.slider_change, "sink", ['a', '2'])
        self.Master_A3_Adjust.connect('value-changed', self.slider_change, "sink", ['a', '3'])

        self.Master_A1_Adjust.set_value(self.config['a']['1']['vol'])
        self.Master_A2_Adjust.set_value(self.config['a']['2']['vol'])
        self.Master_A3_Adjust.set_value(self.config['a']['3']['vol'])


        self.Master_B1_Adjust = self.builder.get_object('Master_B1_Adjust')
        self.Master_B2_Adjust = self.builder.get_object('Master_B2_Adjust')
        self.Master_B3_Adjust = self.builder.get_object('Master_B3_Adjust')

        self.Master_B1_Adjust.connect('value-changed', self.slider_change, "source", ['b', '1'])
        self.Master_B2_Adjust.connect('value-changed', self.slider_change, "source", ['b', '2'])
        self.Master_B3_Adjust.connect('value-changed', self.slider_change, "source", ['b', '3'])
        self.Master_B1_Adjust.set_value(self.config['b']['1']['vol'])
        self.Master_B2_Adjust.set_value(self.config['b']['2']['vol'])
        self.Master_B3_Adjust.set_value(self.config['b']['3']['vol'])

        self.EQ_A1 = self.builder.get_object('EQ_A1')
        self.EQ_A2 = self.builder.get_object('EQ_A2')
        self.EQ_A3 = self.builder.get_object('EQ_A3')
        self.EQ_A1.connect('pressed', self.open_eq, ['a', '1'], 'A1_EQ')
        self.EQ_A2.connect('pressed', self.open_eq, ['a', '2'], 'A2_EQ')
        self.EQ_A3.connect('pressed', self.open_eq, ['a', '3'], 'A3_EQ')

        self.EQ_B1 = self.builder.get_object('EQ_B1')
        self.EQ_B2 = self.builder.get_object('EQ_B2')
        self.EQ_B3 = self.builder.get_object('EQ_B3')
        self.EQ_B2.connect('pressed', self.open_eq, ['b', '2'], 'B2_EQ')
        self.EQ_B1.connect('pressed', self.open_eq, ['b', '1'], 'B1_EQ')
        self.EQ_B3.connect('pressed', self.open_eq, ['b', '3'], 'B3_EQ')

        self.Mute_A1 = self.builder.get_object('Mute_A1')
        self.Mute_A2 = self.builder.get_object('Mute_A2')
        self.Mute_A3 = self.builder.get_object('Mute_A3')
        self.Mute_A1.connect('toggled', self.mute_toggle, ['a', '1', 'name'], 'sink')
        self.Mute_A2.connect('toggled', self.mute_toggle, ['a', '2', 'name'], 'sink')
        self.Mute_A3.connect('toggled', self.mute_toggle, ['a', '3', 'name'], 'sink')
        self.Mute_A1.set_active(self.config['a']['1']['mute'])
        self.Mute_A2.set_active(self.config['a']['2']['mute'])
        self.Mute_A3.set_active(self.config['a']['3']['mute'])

        self.Mute_B1 = self.builder.get_object('Mute_B1')
        self.Mute_B2 = self.builder.get_object('Mute_B2')
        self.Mute_B3 = self.builder.get_object('Mute_B3')
        self.Mute_B1.connect('toggled', self.mute_toggle, ['b', '1', 'name'], 'source')
        self.Mute_B2.connect('toggled', self.mute_toggle, ['b', '2', 'name'], 'source')
        self.Mute_B3.connect('toggled', self.mute_toggle, ['b', '3', 'name'], 'source')
        self.Mute_B1.set_active(self.config['b']['1']['mute'])
        self.Mute_B2.set_active(self.config['b']['2']['mute'])
        self.Mute_B3.set_active(self.config['b']['3']['mute'])
        self.init = False


        self.Window = self.builder.get_object('Window')

        self.Window.connect("delete_event", self.delete_event, self.config)

        self.Window.set_type_hint(Gdk.WindowTypeHint.DIALOG)

        self.builder.connect_signals(self)
        self.Window.show_all()

    def open_eq(self, button, index, name):

        if self.config[index[0]][index[1]]['name'] == '':
            return

        EqPopover(button, self.config, self.pulse, self.gladefile, index, name)


    def mute_toggle(self, button, index, device):
        name = self.config[index[0]][index[1]][index[2]]
        self.config[index[0]][index[1]]['mute'] = button.get_active()
        if name == '':
            return
        state = 1 if button.get_active() else 0
        self.pulse.mute(name, device, state)

    def mono_toggle(self, widget):
        pass

    def set_popup_entry(self, widget):
        name = widget.get_text()
        old_name = self.config[self.Label_Index[0]][self.Label_Index[1]][self.Label_Index[2]]
        if name == old_name:
            self.Popover.popdown()
            widget.set_text('')
            return

        if old_name != '':
            os.popen(f'pmctl remove {old_name}')

        os.popen(f'pmctl init sink {name}')
        self.PopActive.set_text(name)
        self.Popover.popdown()
        self.config[self.Label_Index[0]][self.Label_Index[1]][self.Label_Index[2]] = name
        if name != '':
            self.pulse.reconnect(self.config, self.Label_Index[0], self.Label_Index[1])

    def label_click(self, widget, event, label, index):
        self.Label_Index = index
        self.Popover.set_relative_to(widget)
        self.Popover.popup()
        self.PopActive = label

    def slider_change(self, slider, device_type, index):
        val = int(slider.get_value())
        self.config[index[0]][index[1]]['vol'] = val
        device = self.config[index[0]][index[1]]['name']
        self.pulse.volume(device_type, device, val)

    def loopback_latency_popop(self, widget, event, index):
        if event.button == 3:
            Latency_Popup(widget, self.config, self.gladefile, index)

    def noisetorch_popop(self, widget, event, index):
        if event.button == 3:
            Noisetorch_Popup(widget, self.config, self.gladefile, index)
    

    def noisetorch_toggle(self, widget, source_index, sink_name):
        stat = 'connect' if widget.get_active() == True else 'disconnect'
        self.config[source_index[0]][source_index[1]]['use_noisetorch'] = True if stat == 'connect' else False
        source = self.config[source_index[0]][source_index[1]]['name']
        self.config[source_index[0]][source_index[1]]['noisetorch_name'] = sink_name
        control = self.config[source_index[0]][source_index[1]]['noisetorch_control']
        latency = self.config[source_index[0]][source_index[1]]["noisetorch_latency"]
        command = f'pmctl noisetorch {sink_name} {source} {control} {stat} {latency}\n'
        if self.init == False:
            for i in ['a1','a2','a3','b1','b2','b3']:
                if self.config[source_index[0]][source_index[1]][i] == True:
                    output = list(i)
                    output_dev = self.config[output[0]][output[1]]['name']
                    latency = self.config[source_index[0]][source_index[1]][i + "_latency"]
                    if output[0] == 'b':
                        output_dev = output_dev + '_sink'
                    if stat == 'connect':
                        command = command + f'pmctl disconnect {source} {output_dev}\n'
                        command = command + f'pmctl connect {sink_name}.monitor {output_dev} {latency}\n'
                    else:
                        command = command + f'pmctl connect {source} {output_dev} {latency}\n'
        os.popen(command)
        # print(command)

    def on_button_toggled(self, button, sink_index, source_index):
        is_eq = False
        sink = self.config[sink_index[0]][sink_index[1]]['name']
        if self.config[sink_index[0]][sink_index[1]]['eq_control'] == True:
            sink = self.config[sink_index[0]][sink_index[1]]['eq_name']
            is_eq = True

        source = self.config[source_index[0]][source_index[1]]['name']
        if source_index[0] == 'hi':
            if self.config[source_index[0]][source_index[1]]['use_noisetorch'] == True:
                source = self.config[source_index[0]][source_index[1]]['noisetorch_name'] + '.monitor'
        if sink == '' or source == '':
            return
        if sink_index[0] == 'b' and is_eq == False:
            sink = sink + '_sink'
        if source_index[0] == 'vi':
            source = source + '.monitor'

        self.config[source_index[0]][source_index[1]][sink_index[0] + sink_index[1]] = button.get_active()
        state = "connect" if button.get_active() else "disconnect"
        latency = self.config[source_index[0]][source_index[1]][sink_index[0] + sink_index[1] + "_latency"]
        self.pulse.connect(self.config, state, sink, source, latency)

    def delete_event(self, widget, event, donnees=None):
        with open(get_config_path(), 'w') as outfile:
            json.dump(self.config, outfile, indent='\t', separators=(',', ': '))
        Gtk.main_quit()
        return False

    def on_combo_changed(self, widget, index, device):
        model = widget.get_active()
        if model > 0:
            self.config[index[0]][index[1]]['name'] = device[model - 1][0]
        else:
            self.config[index[0]][index[1]]['name'] = ""
        # widget.set_text
        # print(self.config[index[0]][index[1]]['name'])

def save_config(path):
    with open('config.json', 'w') as outfile:
        json.dump(self.config, outfile, indent='\t', separators=(',', ': '))


def cmd(command):
    sys.stdout.flush()
    MyOut = subprocess.Popen(command.split(' '), 
        stdout=subprocess.PIPE, 
        stderr=subprocess.STDOUT)
    stdout,stderr = MyOut.communicate()
    return stdout.decode()

def get_config_path(glade=False):
    config_path = os.getenv('XDG_CONFIG_HOME')
    if config_path == None:
        config_path = os.getenv('HOME')
        config_path = os.path.join(config_path,'.config')
    config_path = os.path.join(config_path,'pulsemeeter')
    Path(config_path).mkdir(parents=True, exist_ok=True)
    config_file = os.path.join(config_path,'config.json')
    glade_file = os.path.join(config_path,'Interface.glade')
    if glade == True:
        return glade_file
    return config_file

def is_running():
    try:
        with open(PIDFILE) as f:
            pid = int(next(f))
        return os.kill(pid, 0)
    except Exception:
        return False

def main():
    config_orig='{"a": {"1": {"name": "", "vol": 100, "mute": false, "eq_control": "", "eq_name": "", "use_eq": false}, "2": {"name": "", "vol": 100, "mute": false, "eq_control": "", "eq_name": "", "use_eq": false}, "3": {"name": "", "vol": 100, "mute": false, "eq_control": "", "eq_name": "", "use_eq": false}}, "b": {"1": {"name": "Mic", "vol": 100, "mute": false, "eq_control": "", "eq_name": "", "use_eq": false}, "2": {"name": "Mic_Aux", "vol": 100, "mute": false, "eq_control": "", "eq_name": "", "use_eq": false}, "3": {"name": "Mic_Aux_2", "vol": 100, "mute": false, "eq_control": "", "eq_name": "", "use_eq": false}}, "vi": {"1": {"name": "Virtual_Sink", "a1": false, "a2": false, "a3": false, "b1": false, "b2": false, "b3": false, "a1_latency": 200, "a2_latency": 200, "a3_latency": 200, "b1_latency": 200, "b2_latency": 200, "b3_latency": 200, "vol": 100, "mute": false, "eq_control": "", "eq_name": "", "use_eq": false}, "2": {"name": "Virtual_Sink_Aux", "a1": false, "a2": false, "a3": false, "b1": false, "b2": false, "b3": false, "a1_latency": 200, "a2_latency": 200, "a3_latency": 200, "b1_latency": 200, "b2_latency": 200, "b3_latency": 200, "vol": 100, "mute": false, "eq_control": "", "eq_name": "", "use_eq": false}, "3": {"name": "Virtual_Sink_Aux_2", "a1": false, "a2": false, "a3": false, "b1": false, "b2": false, "b3": false, "a1_latency": 200, "a2_latency": 200, "a3_latency": 200, "b1_latency": 200, "b2_latency": 200, "b3_latency": 200, "vol": 100, "mute": false, "eq_control": "", "eq_name": "", "use_eq": false}}, "hi": {"1": {"name": "", "a1": false, "a2": false, "a3": false, "b1": false, "b2": false, "b3": false, "a1_latency": 200, "a2_latency": 200, "a3_latency": 200, "b1_latency": 200, "b2_latency": 200, "b3_latency": 200, "vol": 100, "mute": false, "eq_control": "", "eq_name": "", "use_eq": false, "use_noisetorch": false, "noisetorch_name": "", "noisetorch_control": 95, "noisetorch_latency": 200}, "2": {"name": "", "a1": false, "a2": false, "a3": false, "b1": false, "b2": false, "b3": false, "a1_latency": 200, "a2_latency": 200, "a3_latency": 200, "b1_latency": 200, "b2_latency": 200, "b3_latency": 200, "vol": 100, "mute": false, "eq_control": "", "eq_name": "", "use_eq": false, "use_noisetorch": false, "noisetorch_name": "", "noisetorch_control": 95, "noisetorch_latency": 200}, "3": {"name": "", "a1": false, "a2": false, "a3": false, "b1": false, "b2": false, "b3": false, "a1_latency": 200, "a2_latency": 200, "a3_latency": 200, "b1_latency": 200, "b2_latency": 200, "b3_latency": 200, "vol": 100, "mute": false, "eq_control": "", "eq_name": "", "use_eq": false, "use_noisetorch": false, "noisetorch_name": "", "noisetorch_control": 95, "noisetorch_latency": 200}}}'
    config_orig = json.loads(config_orig)
    config_file = get_config_path()
    config = None
    if not os.path.isfile(config_file):
        config = config_orig
        with open(config_file, 'w') as outfile:
            json.dump(config, outfile, indent='\t', separators=(',', ': '))
    else:
        config = json.load(open(config_file))
        changed = False
        for i in ['a', 'b', 'vi', 'hi']:
            for j in range(1, 4):
                for k in config_orig[i][str(j)]:
                    if not k in config[i][str(j)]:
                        changed = True
                        config[i][str(j)][k] = config_orig[i][str(j)][k]
        if changed == True:
            with open(config_file, 'w') as outfile:
                json.dump(config, outfile, indent='\t', separators=(',', ': '))
    # config = json.load(open('config.json'))
    pulse = Pulse(config)
    if len(sys.argv) > 1 and sys.argv[1] == 'init':
        exit()
    app = MainWindow(config, pulse)
    return Gtk.main()


if __name__ == '__main__':
    if is_running() != False:
        print('Another copy is already running')
        sys.exit(0)
    with open(PIDFILE, 'w') as f:
        f.write(f'{os.getpid()}\n')
    mainret = main()
    sys.exit(mainret)
